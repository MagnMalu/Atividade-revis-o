Lista de Exercícios de JavaScript

1. Completar a função para somar dois números
function somar(a, b) {
return a + b;
}
console.log(somar(5, 3)); // 8
2. Criar uma função que retorne 'Par' ou 'Ímpar'
function parOuImpar(numero) {
return numero % 2 === 0 ? 'Par' : 'Ímpar';
}
console.log(parOuImpar(4)); // 'Par'
3. Escreva um programa que converta metros em centímetros e milímetros.
function converterMedidas(metros){
  let centimetros=metros*100;
  let milimetros=metros*1000;
  
  console. log(`${metros} metros equivalem a:`);
  console. log(`${centimetros} centimetros equivalem a:`);
  console. log(`${milimetros} milimetros equivalem a:`);
}
converterMedidas(10);
4.Dado o array const frutas = ['maçã', 'banana'];, adicione as frutas 'laranja' e 'uva'
ao final do array, usando método.
const frutas = ['maçã', 'banana'];
frutas.push('laranja')
frutas.push('uva')
console.log(frutas)

5.Considere o array const numeros = [1, 2, 3, 4, 5];. Remova o último elemento do
array e armazene-o em uma variável chamada ultimoNumero, usando método.
const numeros = [1, 2, 3, 4, 5];
let ultimoNumero=numeros[numeros.length-1]
console.log(numeros)
console.log(ultimoNumero)
6. Dado o array const cores = ['vermelho', 'azul', 'verde'];, remova o primeiro
elemento e armazene-o em uma variável chamada primeiraCor, usando método .
const cores = ['vermelho', 'azul', 'verde'];
let primeiraCor=cores.shift();
console.log(cores)
console.log(primeiraCor)

7.Com o array const animais = ['cachorro', 'gato'];, adicione os animais 'elefante' e
'leão' no início do array, usando método.
const animais=['cachorro','gato']
animais.unshift('elefante','leão')
console.log(animais)

8.Dado o array const numeros = [10, 20, 30, 40, 50];, remova os dois primeiros
elementos e, em seguida, adicione os números 5 e 15 nas primeiras posições,
usando método.
const numeros=[10,20,30,40,50];
numeros.shift()
numeros.shift()
numeros.unshift(15)
numeros.unshift(5)
console.log(numeros)

9. Considere o array const letras = ['a', 'b', 'c', 'd', 'e'];. Crie um novo array contendo
apenas os elementos 'b', 'c' e 'd', usando método
const letras=['a', 'b', 'c', 'd', 'e'];
const parteLetras = letras.slice(1,4);

console.log(parteLetras);

10. Dado os arrays const array1 = [1, 2, 3]; e const array2 = [4, 5, 6]; crie um novo
array que combine os elementos de ambos, usando o método concat
const array1 = [1, 2, 3]; 
const array2 = [4, 5, 6]; 
const arrays=array1.concat(array2)
console.log(arrays)

11. Criar uma função que recebe um nome e retorna uma saudação personalizada
function saudacao(nome) {
// Complete para retornar "Olá, <nome>!"
}
console.log(saudacao("Carlos")); // "Olá, Carlos!"
console.log(saudacao("Ana")); // "Olá, Ana!"
function saudacao (nome){
return `Olá, ${nome}!`
}
console.log(saudacao("Carlos")); // "Olá, Carlos!"
console.log(saudacao("Ana")); // "Olá, Ana!"
12. Qual a diferença entre var, let e const?
Var:  Pode ser declarada novamente na mesma função, não respeita alguns blocos (como if e for). Deve ser evitado.
Let: Não pode ser declarado novamente no mesmo bloco, respeita os blocos. São utilizados em casos de variáveis que mudam de valor.
Const: Não pode ser declarado novamente e não pode alterar o valor. São utilizados em casos de constantes ou objetos que não mudam de referência.
13. O que acontece quando você tenta acessar uma variável que ainda não foi definida?
 Ao testar o código, irá ocorrer um erro em todo o deu código e um aviso dizendo “ReferenceError:  (nome da variável) is not defined”.
14. Como funciona o typeof? Escreva um código usando o typeof
 O typeof é utilizado para descobrir o tipo de dado de um valor ou variável. 
Exemplo:
let nomes=["Maria", "José", "Antônio"];
console.log(nomes);
console.log(typeof nomes);
Resposta do exemplo:
[ 'Maria', 'José', 'Antônio' ]
'object'
